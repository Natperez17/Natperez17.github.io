[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Notas de R",
    "section": "",
    "text": "Estas notas fueron realizadas con la finalidad de ser un recurso fundamental para el análisis de datos. Una guía que permita agilizar y tomar decisiones rápidas en cuanto a los procedimientos ideales para el procesamiento, análisis, inferencia y viasualización de datos en R.\nNota: Todos los recursos empleados en este documento son extraídos de notas de clases, páginas web y propios."
  },
  {
    "objectID": "index.html#datos-de-clientes",
    "href": "index.html#datos-de-clientes",
    "title": "Notas de R",
    "section": "Datos de clientes",
    "text": "Datos de clientes\nLa base de datos data_clientes contiene información de los clientes de una Cooperativa, se cuentan con 4117 registro y 11 columnas con variables que incluyen un identificador único, así como características sociodemográficas como la edad, el género y el estado civil. También recoge variables económicas como los ingresos anuales, el número de hijos, el número de tarjetas, la modalidad de pago, la tenencia de hipoteca y el número de préstamos activos. Finalmente, incluye la variable RIESGO, que clasifica a los clientes según su perfil crediticio, y puede ser utilizada como variable objetivo en modelos de predicción o segmentación.\n\n# Cargar librerías e instalar las que no estén instaladas\npacman::p_load(tidyverse, janitor)\n\n\n# Cargar base de datos\ndata_clientes &lt;- read.table(\"C:/Users/natal/Escritorio/Semestres/Semestre 10/Mineria/Data Clientes Cooperativa.txt\", \n                            sep= \"\\t\", na= c(\"NA\", \"\", \" \"), header=T)\n\n# Revisar los primeros 6 registros de la base de datos\nhead(data_clientes)\n\n      ID EDAD INGRESOS GENERO ESTADO_CIVIL NUM_HIJOS NUM_TARJETAS\n1 100756   44    59944      m      married         1            2\n2 100668   35    59692   &lt;NA&gt;      married         1            1\n3 100418   34    59508      m      married         1            1\n4 100416   34    59463      m      married         0            2\n5 100590   39    59393      f      married         0            2\n6 100657   41    59276      m      married         1            2\n  MODALIDAD_PAGO HIPOTECA PRESTAMOS RIESGO\n1        monthly        y         0      V\n2        monthly        y         0      F\n3        monthly        y         1      V\n4        monthly        y         1      F\n5        monthly        y         0      V\n6        monthly        y         1      V\n\n# Estructura de la base de datos \nglimpse(data_clientes)\n\nRows: 4,117\nColumns: 11\n$ ID             &lt;int&gt; 100756, 100668, 100418, 100416, 100590, 100657, 100702,…\n$ EDAD           &lt;int&gt; 44, 35, 34, 34, 39, 41, 42, 31, 28, 30, 38, 36, 42, 44,…\n$ INGRESOS       &lt;int&gt; 59944, 59692, 59508, 59463, 59393, 59276, 59201, 59193,…\n$ GENERO         &lt;chr&gt; \"m\", NA, \"m\", \"m\", \"f\", \"m\", \"m\", \"f\", \"m\", \"m\", \"m\", \"…\n$ ESTADO_CIVIL   &lt;chr&gt; \"married\", \"married\", \"married\", \"married\", \"married\", …\n$ NUM_HIJOS      &lt;int&gt; 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1…\n$ NUM_TARJETAS   &lt;int&gt; 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1…\n$ MODALIDAD_PAGO &lt;chr&gt; \"monthly\", \"monthly\", \"monthly\", \"monthly\", \"monthly\", …\n$ HIPOTECA       &lt;chr&gt; \"y\", \"y\", \"y\", \"y\", \"y\", \"y\", \"y\", \"y\", \"y\", \"y\", \"y\", …\n$ PRESTAMOS      &lt;int&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1…\n$ RIESGO         &lt;chr&gt; \"V\", \"F\", \"V\", \"F\", \"V\", \"V\", \"V\", \"V\", \"F\", \"V\", \"F\", …\n\n# Estadísticas descriptivas de las variables de la base de datos\nsummary(data_clientes)\n\n       ID              EDAD          INGRESOS        GENERO         \n Min.   :100001   Min.   :18.00   Min.   :15005   Length:4117       \n 1st Qu.:101030   1st Qu.:23.00   1st Qu.:20497   Class :character  \n Median :102059   Median :31.00   Median :23490   Mode  :character  \n Mean   :102059   Mean   :31.82   Mean   :25580                     \n 3rd Qu.:103088   3rd Qu.:41.00   3rd Qu.:27566                     \n Max.   :104117   Max.   :50.00   Max.   :59944                     \n ESTADO_CIVIL         NUM_HIJOS      NUM_TARJETAS   MODALIDAD_PAGO    \n Length:4117        Min.   :0.000   Min.   :0.000   Length:4117       \n Class :character   1st Qu.:1.000   1st Qu.:1.000   Class :character  \n Mode  :character   Median :1.000   Median :2.000   Mode  :character  \n                    Mean   :1.453   Mean   :2.429                     \n                    3rd Qu.:2.000   3rd Qu.:4.000                     \n                    Max.   :4.000   Max.   :6.000                     \n   HIPOTECA           PRESTAMOS        RIESGO         \n Length:4117        Min.   :0.000   Length:4117       \n Class :character   1st Qu.:1.000   Class :character  \n Mode  :character   Median :1.000   Mode  :character  \n                    Mean   :1.376                     \n                    3rd Qu.:2.000                     \n                    Max.   :3.000                     \n\nlength(unique(data_clientes$ID))  #Devuelve el número de valores únicos en la variable ID\n\n[1] 4117"
  },
  {
    "objectID": "index.html#descripción-de-datos",
    "href": "index.html#descripción-de-datos",
    "title": "Notas de R",
    "section": "Descripción de datos",
    "text": "Descripción de datos\n\nDescripción de datos cuantitativos\nEste código permite obtener información detallada de las estadísticas descriptivas para las variables numéricas, como el n, desviación estándar, IQR, etc. Esta información es mucho más completa que el summary().\n\nvariables.Num &lt;- c(\"EDAD\", \"INGRESOS\", \"NUM_HIJOS\", \"NUM_TARJETAS\", \"PRESTAMOS\")\n\n# Tabla: Análisis descriptivo variables númericas\n\ntabla_descrip.dt_clientes &lt;- sapply(variables.Num, function(var){\n  x=data_clientes[[var]]\n  c(n= length(x),\n    media= round(mean(x, na.rm=T),2),\n    Desv.Est= round(sd(x, na.rm=T),2),\n    mediana= round(median(x, na.rm=T),2),\n    IQR= round(IQR(x, na.rm=T),2),\n    Percentil1= round(quantile(x, prob=0.25, na.rm=T),2),\n    Percentil2= round(quantile(x, prob=0.75, na.rm=T),2),\n    Percentil3= round(quantile(x, prob=0.95, na.rm=T),2))\n})\n\ntabla_descrip.dt_clientes\n\n                  EDAD INGRESOS NUM_HIJOS NUM_TARJETAS PRESTAMOS\nn              4117.00  4117.00   4117.00      4117.00   4117.00\nmedia            31.82 25580.21      1.45         2.43      1.38\nDesv.Est          9.88  8766.87      1.17         1.88      0.84\nmediana          31.00 23490.00      1.00         2.00      1.00\nIQR              18.00  7069.00      1.00         3.00      1.00\nPercentil1.25%   23.00 20497.00      1.00         1.00      1.00\nPercentil2.75%   41.00 27566.00      2.00         4.00      2.00\nPercentil3.95%   48.00 44773.80      4.00         6.00      3.00\n\n\n\n\nDescripción de datos cualitativos\nEste código genera las frecuencias absolutas y relativas para todas las variables cualitativas a tráves de tabyl() y lapply(), este último comando se utiliza para aplicar una función a cada elemento de una lista o vector, devolviendo siempre el resultado como una lista.\n\nvariables.Cat &lt;- c(\"GENERO\", \"ESTADO_CIVIL\", \"MODALIDAD_PAGO\", \"HIPOTECA\", \"RIESGO\")\nFrec_tablas.Cat &lt;- lapply(variables.Cat, function(var) tabyl(data_clientes[[var]]))\nnames(Frec_tablas.Cat) &lt;- variables.Cat\nFrec_tablas.Cat\n\n$GENERO\n data_clientes[[var]]    n      percent valid_percent\n                    f 2077 0.5044935633     0.5046161\n                    m 2039 0.4952635414     0.4953839\n                 &lt;NA&gt;    1 0.0002428953            NA\n\n$ESTADO_CIVIL\n data_clientes[[var]]    n   percent\n            divsepwid  873 0.2120476\n              married 2089 0.5074083\n               single 1155 0.2805441\n\n$MODALIDAD_PAGO\n data_clientes[[var]]    n   percent\n              monthly 2026 0.4921059\n               weekly 2091 0.5078941\n\n$HIPOTECA\n data_clientes[[var]]    n  percent\n                    n  917 0.222735\n                    y 3200 0.777265\n\n$RIESGO\n data_clientes[[var]]    n   percent\n                    F 3313 0.8047122\n                    V  804 0.1952878"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#datos-faltantes",
    "href": "index.html#datos-faltantes",
    "title": "Notas de R",
    "section": "Datos faltantes",
    "text": "Datos faltantes\nLa figura fig-MissData es muy útil para visualizar los datos faltantes por variable. En este caso hay muy pocos por lo que no se logran ver.\n\nlibrary(visdat)\n#| label: fig-MissData\n#| fig-cap: \"Datos faltantes con vis_miss\"\n#| code-fold: true\nvis_miss(data_clientes) \n\n\n\n\n\n\n\n\nPor otro lado, dado que la idea es identificar cuáles son las variables que contienen NA’s se utiliza sapply() en vez de lapply() dado que la idea es que devuelva un vector en vez de una lista.\n\n# Revisar si la base de datos contiene NA (contiene 1)\nsum(is.na(data_clientes))\n\n[1] 1\n\n# Verificar en que columna se encuentra el NA\nNa_columnas.dt_clientes &lt;- sapply(dput(colnames(data_clientes)), function(var) sum(is.na(data_clientes[[var]])))\n\nc(\"ID\", \"EDAD\", \"INGRESOS\", \"GENERO\", \"ESTADO_CIVIL\", \"NUM_HIJOS\", \n\"NUM_TARJETAS\", \"MODALIDAD_PAGO\", \"HIPOTECA\", \"PRESTAMOS\", \"RIESGO\"\n)\n\nNa_columnas.dt_clientes # Se encuentra en la variable GENERO\n\n            ID           EDAD       INGRESOS         GENERO   ESTADO_CIVIL \n             0              0              0              1              0 \n     NUM_HIJOS   NUM_TARJETAS MODALIDAD_PAGO       HIPOTECA      PRESTAMOS \n             0              0              0              0              0 \n        RIESGO \n             0"
  },
  {
    "objectID": "index.html#modificar-categorías-de-las-variables",
    "href": "index.html#modificar-categorías-de-las-variables",
    "title": "Notas de R",
    "section": "Modificar categorías de las variables",
    "text": "Modificar categorías de las variables\n\nlibrary(dplyr)\ndata_clientes &lt;- data_clientes %&gt;%\n  mutate(GENERO = dplyr::recode(GENERO, \"f\"= \"Femenino\", \"m\"= \"Masculino\"),\n         ESTADO_CIVIL = dplyr::recode(ESTADO_CIVIL, \"divsepwid\" = \"Viudo/Divorciado\",\n                                      \"married\" = \"Casado\", \"single\" = \"Soltero\"),\n         MODALIDAD_PAGO = dplyr::recode(MODALIDAD_PAGO, \"monthly\"= \"Mensual\", \n                                       \"weekly\" = \"Semanal\"),\n         HIPOTECA =dplyr::recode(HIPOTECA,\"n\"=\"NO\", \"y\"=\"Si\"),\n         RIESGO = dplyr::recode(RIESGO, \"F\"=\"Cumplimiento\", \"V\"=\"Impago\"))\n\n# Revisar como quedaron las variables recodificadas\nglimpse(data_clientes)\n\nRows: 4,117\nColumns: 11\n$ ID             &lt;int&gt; 100756, 100668, 100418, 100416, 100590, 100657, 100702,…\n$ EDAD           &lt;int&gt; 44, 35, 34, 34, 39, 41, 42, 31, 28, 30, 38, 36, 42, 44,…\n$ INGRESOS       &lt;int&gt; 59944, 59692, 59508, 59463, 59393, 59276, 59201, 59193,…\n$ GENERO         &lt;chr&gt; \"Masculino\", NA, \"Masculino\", \"Masculino\", \"Femenino\", …\n$ ESTADO_CIVIL   &lt;chr&gt; \"Casado\", \"Casado\", \"Casado\", \"Casado\", \"Casado\", \"Casa…\n$ NUM_HIJOS      &lt;int&gt; 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1…\n$ NUM_TARJETAS   &lt;int&gt; 2, 1, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1…\n$ MODALIDAD_PAGO &lt;chr&gt; \"Mensual\", \"Mensual\", \"Mensual\", \"Mensual\", \"Mensual\", …\n$ HIPOTECA       &lt;chr&gt; \"Si\", \"Si\", \"Si\", \"Si\", \"Si\", \"Si\", \"Si\", \"Si\", \"Si\", \"…\n$ PRESTAMOS      &lt;int&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1…\n$ RIESGO         &lt;chr&gt; \"Impago\", \"Cumplimiento\", \"Impago\", \"Cumplimiento\", \"Im…"
  },
  {
    "objectID": "index.html#pruebas-no-paramétricas",
    "href": "index.html#pruebas-no-paramétricas",
    "title": "Notas de R",
    "section": "Pruebas No paramétricas",
    "text": "Pruebas No paramétricas\nLa pruebas parámétricas son esenciales cuando se quiere realizar análisis bivariados sin asumir una distribución específica de los datos queu generalemnte es la normalidad. Existen varias pruebas para realizar inferencias respecto a las relaciones, sin embargo hay ciertas condiciones que se deben tener en cuenta como lo muestra la siguiente tabla:\n\n\n\n\n\n\n\n\nTipo de Variables Comparadas\nCondición\nPrueba Estadística\n\n\n\n\n2 variables numéricas\nDistribución normal\nCorrelación de Pearson\n\n\n\nNo normal\nCorrelación de Spearman\n\n\n1 variable numérica + 1 categórica\nDistribución normal\n2 categorías: t de Student\n\n\n\n\n&gt;2 categorías: ANOVA\n\n\n\nNo normal\n2 categorías: U de Mann-Whitney\n\n\n\n\n&gt;2 categorías: Kruskal-Wallis\n\n\n2 variables categóricas\nTabla 2x2\nTest de Fisher\n\n\n\nTabla r x s (&gt;2 categorías)\nChi-cuadrado (χ²)\n\n\n\n\nEvaluar normalidad\nLa prueba de Shapiro-Wilk se utiliza para evualar la normalidad de una variable, el comando es shapiro.test().\n(H₀): Los datos provienen de una distribución normal.\n(H₁): Los datos no provienen de una distribución normal.\nInterpretación del p-valor:\nSi p &gt; 0.05: no se rechaza H₀ → los datos son compatibles con una distribución normal.\nSi p ≤ 0.05: se rechaza H₀ → los datos no siguen una distribución normal.\n\nNorm_tablas.Num &lt;- lapply(variables.Num, function(var) shapiro.test(data_clientes[[var]]))\nnames(Norm_tablas.Num) &lt;- variables.Num\nNorm_tablas.Num # Ninguna variable sigue una distribución normal\n\n$EDAD\n\n    Shapiro-Wilk normality test\n\ndata:  data_clientes[[var]]\nW = 0.91622, p-value &lt; 2.2e-16\n\n\n$INGRESOS\n\n    Shapiro-Wilk normality test\n\ndata:  data_clientes[[var]]\nW = 0.82675, p-value &lt; 2.2e-16\n\n\n$NUM_HIJOS\n\n    Shapiro-Wilk normality test\n\ndata:  data_clientes[[var]]\nW = 0.88775, p-value &lt; 2.2e-16\n\n\n$NUM_TARJETAS\n\n    Shapiro-Wilk normality test\n\ndata:  data_clientes[[var]]\nW = 0.88518, p-value &lt; 2.2e-16\n\n\n$PRESTAMOS\n\n    Shapiro-Wilk normality test\n\ndata:  data_clientes[[var]]\nW = 0.86204, p-value &lt; 2.2e-16\n\n\n\n\nCorrelación\nEs una medida estadística que indica la fuerza y dirección de una relación lineal entre dos variables cuantitativas.El resultado se encuentra en un rango entre [-1,1]. -1 : Correlación negativa perfecta (una variable sube y otra baja) 0: No hay correlación 1: Correlación positiva perfecta (ambas variables aumentan o disminuyen juntas)\n\nlibrary(corrplot)\n\ncorrplot 0.92 loaded\n\ncor(data_clientes$INGRESOS, data_clientes$EDAD, method = \"spearman\")\n\n[1] 0.3568635\n\n# Correlación entre las variables numéricas ------------------------------------\n\n# Matriz de correlación\nMatriz_cor &lt;- cor(data_clientes[variables.Num], #Dataframe con las variables numéricas de interés\n                  use = \"complete.obs\",  #Utiliza solo filas con datos completos, es como un na.rm =T\n                  method = \"spearman\")   #Método a utilizar: Spearman, Pearson, etc.\n\n# Gráfico de correlación\ncorrplot(Matriz_cor,         #Matriz de correlación previamente calculada\n         method = \"color\",   #Agregar color para identificar la intensidad de la correlación\n         type = \"upper\",     #Visualizar solo el triangulo superior\n         addCoef.col = T)    #Añadir los valores de la autocorrelación en color negro\n\n\n\n\n\n\n\n\n\n\nU de Mann-Whitney\nEsta prueba evalúa si hay diferencia entre las medianas de los grupos.El comando difiere al nombre ya que es wilcox.test().\n(H₀): La mediana de los grupos son iguales.\n(H₁): La mediana de los grupos son diferentes.\nSi p ≤ 0.05: se rechaza H₀ → Hay diferencia en las medianas de los grupos.\n\nwilcox.test(INGRESOS~GENERO,  # Formula, como en un modelo logistico simple\n            data = data_clientes) #datos\n\n\n    Wilcoxon rank sum test with continuity correction\n\ndata:  INGRESOS by GENERO\nW = 2088984, p-value = 0.4544\nalternative hypothesis: true location shift is not equal to 0\n\n\n\n\nOtros\nPara T-Student y ANOVA se evalúa la diferencia entre las medias de los grupos. Parael test de Kruskall Wallis la diferencia entre las medianas de los grupos. Para el Test de fisher y Chi-cuadrado se evalúa la indepencia. Siempre se busca rechazar la Hiótesis nula, es decir, p ≤ 0.05.\nT-Student: t.test() ANOVA: aov(). Antes se evalúa la homogeneidad de varianzas con bartlett.test(). Kruskal Wallis: kruskal.test() Test de fisher: fisher.test() Chi-cuadrado: chisq.test(). Tiene supuesto de valor esperado."
  },
  {
    "objectID": "index.html#visualización-de-datos",
    "href": "index.html#visualización-de-datos",
    "title": "Notas de R",
    "section": "Visualización de datos",
    "text": "Visualización de datos\n\nGráfico de barras\n\n#| label: fig-barras\n#| fig-cap: \"Gráfico de barras\"\n\nggplot(data_clientes, # Dataframe que incluye la variable\n       aes(x=ESTADO_CIVIL, # Variable que quiero graficar (Se grafica el conteo)\n           fill=ESTADO_CIVIL)) + #fill agrega color a cada categoría (colores predeterminados)\n  geom_bar() + #Función que establece el tipo de gráfico\n  geom_text(aes(label = ..count..), # Texto que se mostrará\n            stat = \"count\", # Cómo calcular el valor Conteo de observaciones\n            vjust=2, # Ubicación del valor\n            color= \"white\") + # Color del texto o label\n  scale_fill_manual(values = c(\"#1C86EE\", \"#458B00\", \"#EE1289\")) + # Personalizar colores, fill debe estar arriba\n  scale_x_discrete(limits = c(\"Soltero\", \"Casado\", \"Viudo/Divorciado\")) + # Personalizar el orden de la variable x\n  theme(legend.position = \"right\", axis.title.x = element_blank()) + #Agregar la leyenda al lado derecho y eliminar título eje y\n  labs(title = \"Conteo de la variable Estado civil por categoría\", x = \" Estado civil\", \n       y = \"Conteo (Frecuencia absoluta)\") + # Agregar título y modificar nombres de los ejes\n  guides(fill = guide_legend(title=\"Estado Civil\")) # Modificar título de la leyenda\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\n\n\n\n\n\n\n\n\n\nBoxplot\n\nggplot(data_clientes, aes(x = GENERO, y= INGRESOS)) +\n  stat_boxplot(geom = \"errorbar\",\n               width= 0.25) +\n  geom_boxplot(alpha=0.5, \n               fill=\"#1C86EE\",\n               colour= \"black\", \n               outlier.colour = \"#87CEFA\") +\n  scale_x_discrete(limits= c(\"Femenino\", \"Masculino\")) +\n  labs(title = \"Gráfico de cajas: Ingresos por Género\", x=\"Género\", y=\"Ingresos\")\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`stat_boxplot()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\nFigure 1: Gráfico de Cajas y Bigotes\n\n\n\n\n\n\n\nDispersión\n\n#| label: fig-dispersion\n#| fig-cap: \"Gráfico de Dispersión\"\n\nggplot(data_clientes, aes(x=EDAD, y=INGRESOS)) +\n  geom_point(alpha=0.2) + #Agregar transparencia para que se vea menos denso\n  labs(title=\"Edad vs Ingresos\", x=\"Edad\", y=\"Ingresos\")\n\n\n\n\n\n\n\ndata_clientes.Edad_Ingr &lt;- data_clientes %&gt;%\n  select(EDAD, INGRESOS) %&gt;%\n  group_by(EDAD) %&gt;%\n  summarize(media_Ingresos = mean(INGRESOS, na.rm=T))\n\nggplot(data_clientes.Edad_Ingr, aes(x=EDAD, y=media_Ingresos)) +\n  geom_line(color=\"red\") +\n  labs(title=\"Media de los Ingresos por Edad\", x=\"Edad\", y=\"Media de los Ingresos\") \n\n\n\n\n\n\n\n\n\n\nMosaico\n\n#| label: fig-Mosaico\n#| fig-cap: \"Gráfico de Mosaico\"\n\nlibrary(ggmosaic)\n\nWarning: package 'ggmosaic' was built under R version 4.4.3\n\nggplot(data_clientes) +\n  geom_mosaic(aes(x=product(RIESGO) , fill=ESTADO_CIVIL)) +\n  scale_fill_manual(values =c(\"#1C86EE\", \"#458B00\", \"#EE1289\")) +\n  labs(title = \"Gráfico Mosaico: Riesgo vs Estado Civil\", y= \"Estado Civil\",\n       x=\"Riesgo\") +\n  guides(fill=guide_legend(title= \"Estado Civil\"))\n\nWarning: The `scale_name` argument of `continuous_scale()` is deprecated as of ggplot2\n3.5.0.\n\n\nWarning: The `trans` argument of `continuous_scale()` is deprecated as of ggplot2 3.5.0.\nℹ Please use the `transform` argument instead.\n\n\nWarning: `unite_()` was deprecated in tidyr 1.2.0.\nℹ Please use `unite()` instead.\nℹ The deprecated feature was likely used in the ggmosaic package.\n  Please report the issue at &lt;https://github.com/haleyjeppson/ggmosaic&gt;."
  },
  {
    "objectID": "index.html#tablas-gtsummary",
    "href": "index.html#tablas-gtsummary",
    "title": "Notas de R",
    "section": "Tablas gtsummary",
    "text": "Tablas gtsummary\n\nTablas univariadas\n\nlibrary(gtsummary)\n\ndata_clientes %&gt;% # datos\n    dplyr::select(GENERO, ESTADO_CIVIL, MODALIDAD_PAGO, HIPOTECA, RIESGO) %&gt;% # se seleccionan las variables que se van a tabular, incluyendo la variable a estratificar \n    gtsummary::tbl_summary(\n            by = NULL, # nombre variable a estratificar\n            missing = \"always\", # incluye fila de conteo NA para todas las variables, no se incluye el porcentaje\n            missing_text = \"(Missing)\", # nombre que identifica el recuento de observaciones faltantes\n            statistic = list(all_continuous() ~ \"{median} ({p25}, {p75})\"), # especificar segun test de normalidad, en caso de no rechazar Ho~normalidad se especificaría: list(all_continuous() ~ \"{mean} ({sd})\")\n            digits = list(all_categorical() ~ c(0, 1), # (0) sin decimal la frecuencia absoluta, y (1) decimal la frecuencia relativa\n            all_continuous() ~ c(1, 1))) %&gt;% # (0) sin decimal la mediana o media, y (1) decimal la desv estandar o IQR\n    gtsummary::add_n() %&gt;% \n    gtsummary::bold_labels()  # etiquetas o niveles en negrita\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nN\nN = 4,1171\n\n\n\n\nGENERO\n4,116\n\n\n\n\n    Femenino\n\n\n2,077 (50.5%)\n\n\n    Masculino\n\n\n2,039 (49.5%)\n\n\n    (Missing)\n\n\n1\n\n\nESTADO_CIVIL\n4,117\n\n\n\n\n    Casado\n\n\n2,089 (50.7%)\n\n\n    Soltero\n\n\n1,155 (28.1%)\n\n\n    Viudo/Divorciado\n\n\n873 (21.2%)\n\n\n    (Missing)\n\n\n0\n\n\nMODALIDAD_PAGO\n4,117\n\n\n\n\n    Mensual\n\n\n2,026 (49.2%)\n\n\n    Semanal\n\n\n2,091 (50.8%)\n\n\n    (Missing)\n\n\n0\n\n\nHIPOTECA\n4,117\n\n\n\n\n    NO\n\n\n917 (22.3%)\n\n\n    Si\n\n\n3,200 (77.7%)\n\n\n    (Missing)\n\n\n0\n\n\nRIESGO\n4,117\n\n\n\n\n    Cumplimiento\n\n\n3,313 (80.5%)\n\n\n    Impago\n\n\n804 (19.5%)\n\n\n    (Missing)\n\n\n0\n\n\n\n1 n (%)\n\n\n\n\n\n\n\n\n\n\nTablas bivariadas\n\nlibrary(gtsummary)\n\ndata_clientes %&gt;% # datos\n    dplyr::select(GENERO, ESTADO_CIVIL, MODALIDAD_PAGO, HIPOTECA, RIESGO) %&gt;% # se seleccionan las variables que se van a tabular, incluyendo la variable a estratificar \n    gtsummary::tbl_summary(\n            by = RIESGO, # nombre variable a estratificar\n            missing = \"always\", # incluye fila de conteo NA para todas las variables, no se incluye el porcentaje\n            missing_text = \"(Missing)\", # nombre que identifica el recuento de observaciones faltantes\n            statistic = list(all_continuous() ~ \"{median} ({p25}, {p75})\"), # especificar segun test de normalidad, en caso de no rechazar Ho~normalidad se especificaría: list(all_continuous() ~ \"{mean} ({sd})\")\n            digits = list(all_categorical() ~ c(0, 1), # (0) sin decimal la frecuencia absoluta, y (1) decimal la frecuencia relativa\n            all_continuous() ~ c(1, 1))) %&gt;% # (0) sin decimal la mediana o media, y (1) decimal la desv estandar o IQR\n    gtsummary::add_n() %&gt;%\n    gtsummary::add_overall() %&gt;% \n    gtsummary::modify_spanning_header(all_stat_cols() ~ \"**Chemotherapy Treatment**\") %&gt;% # agregar encabezado\n    gtsummary::bold_labels()  # etiquetas o niveles en negrita \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nN\nChemotherapy Treatment\n\n\nOverall, N = 4,1171\nCumplimiento, N = 3,3131\nImpago, N = 8041\n\n\n\n\nGENERO\n4,116\n\n\n\n\n\n\n\n\n    Femenino\n\n\n2,077 (50.5%)\n1,676 (50.6%)\n401 (49.9%)\n\n\n    Masculino\n\n\n2,039 (49.5%)\n1,636 (49.4%)\n403 (50.1%)\n\n\n    (Missing)\n\n\n1\n1\n0\n\n\nESTADO_CIVIL\n4,117\n\n\n\n\n\n\n\n\n    Casado\n\n\n2,089 (50.7%)\n1,689 (51.0%)\n400 (49.8%)\n\n\n    Soltero\n\n\n1,155 (28.1%)\n930 (28.1%)\n225 (28.0%)\n\n\n    Viudo/Divorciado\n\n\n873 (21.2%)\n694 (20.9%)\n179 (22.3%)\n\n\n    (Missing)\n\n\n0\n0\n0\n\n\nMODALIDAD_PAGO\n4,117\n\n\n\n\n\n\n\n\n    Mensual\n\n\n2,026 (49.2%)\n1,449 (43.7%)\n577 (71.8%)\n\n\n    Semanal\n\n\n2,091 (50.8%)\n1,864 (56.3%)\n227 (28.2%)\n\n\n    (Missing)\n\n\n0\n0\n0\n\n\nHIPOTECA\n4,117\n\n\n\n\n\n\n\n\n    NO\n\n\n917 (22.3%)\n812 (24.5%)\n105 (13.1%)\n\n\n    Si\n\n\n3,200 (77.7%)\n2,501 (75.5%)\n699 (86.9%)\n\n\n    (Missing)\n\n\n0\n0\n0\n\n\n\n1 n (%)\n\n\n\n\n\n\n\n\n\n\nTablas bivariadas con valores p\n\nlibrary(gtsummary)\n\ndata_clientes %&gt;% # datos\n    dplyr::select(GENERO, ESTADO_CIVIL, MODALIDAD_PAGO, HIPOTECA, RIESGO) %&gt;% # se seleccionan las variables que se van a tabular, incluyendo la variable a estratificar \n    gtsummary::tbl_summary(\n            by = RIESGO, # nombre variable a estratificar\n            missing = \"always\", # incluye fila de conteo NA para todas las variables, no se incluye el porcentaje\n            missing_text = \"(Missing)\", # nombre que identifica el recuento de observaciones faltantes\n            statistic = list(all_continuous() ~ \"{median} ({p25}, {p75})\"), # especificar segun test de normalidad, en caso de no rechazar Ho~normalidad se especificaría: list(all_continuous() ~ \"{mean} ({sd})\")\n            digits = list(all_categorical() ~ c(0, 1), # (0) sin decimal la frecuencia absoluta, y (1) decimal la frecuencia relativa\n            all_continuous() ~ c(1, 1))) %&gt;% # (0) sin decimal la mediana o media, y (1) decimal la desv estandar o IQR\n    gtsummary::add_n() %&gt;%\n    gtsummary::add_overall() %&gt;% \n    gtsummary::add_p(list(all_continuous() ~ \"wilcox.test\", # test no parametrico variables numericas\n                          all_categorical() ~ \"chisq.test\")) %&gt;% # test variables categoricas\n    gtsummary::bold_p(t=0.05) %&gt;% # valores p significativos en negrita\n    gtsummary::modify_spanning_header(all_stat_cols() ~ \"**Chemotherapy Treatment**\") %&gt;% # agregar encabezado\n    gtsummary::modify_header(update = list(label ~ \"**Variable**\",\n                           p.value ~ \"***valor p***\")) %&gt;% # modificar encabezado, tanto el nombre como el estilo (***cursiva***, **negrita**)\n    gtsummary::bold_labels() %&gt;%  # etiquetas o niveles en negrita\n    gtsummary::modify_footnote( # notas al pie (queda a su opcion)\n      update = list(\n        all_stat_cols() ~ \"Median (IQR);  n (%)\",\n        p.value ~ \"Wilcoxon rank sum test; Pearson's Chi-squared test\")\n    ) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVariable\nN\nChemotherapy Treatment\nvalor p2\n\n\nOverall, N = 4,1171\nCumplimiento, N = 3,3131\nImpago, N = 8041\n\n\n\n\nGENERO\n4,116\n\n\n\n\n\n\n0.7\n\n\n    Femenino\n\n\n2,077 (50.5%)\n1,676 (50.6%)\n401 (49.9%)\n\n\n\n\n    Masculino\n\n\n2,039 (49.5%)\n1,636 (49.4%)\n403 (50.1%)\n\n\n\n\n    (Missing)\n\n\n1\n1\n0\n\n\n\n\nESTADO_CIVIL\n4,117\n\n\n\n\n\n\n0.7\n\n\n    Casado\n\n\n2,089 (50.7%)\n1,689 (51.0%)\n400 (49.8%)\n\n\n\n\n    Soltero\n\n\n1,155 (28.1%)\n930 (28.1%)\n225 (28.0%)\n\n\n\n\n    Viudo/Divorciado\n\n\n873 (21.2%)\n694 (20.9%)\n179 (22.3%)\n\n\n\n\n    (Missing)\n\n\n0\n0\n0\n\n\n\n\nMODALIDAD_PAGO\n4,117\n\n\n\n\n\n\n&lt;0.001\n\n\n    Mensual\n\n\n2,026 (49.2%)\n1,449 (43.7%)\n577 (71.8%)\n\n\n\n\n    Semanal\n\n\n2,091 (50.8%)\n1,864 (56.3%)\n227 (28.2%)\n\n\n\n\n    (Missing)\n\n\n0\n0\n0\n\n\n\n\nHIPOTECA\n4,117\n\n\n\n\n\n\n&lt;0.001\n\n\n    NO\n\n\n917 (22.3%)\n812 (24.5%)\n105 (13.1%)\n\n\n\n\n    Si\n\n\n3,200 (77.7%)\n2,501 (75.5%)\n699 (86.9%)\n\n\n\n\n    (Missing)\n\n\n0\n0\n0\n\n\n\n\n\n1 Median (IQR); n (%)\n\n\n2 Wilcoxon rank sum test; Pearson’s Chi-squared test"
  },
  {
    "objectID": "index.html#modelo-líneal-simple",
    "href": "index.html#modelo-líneal-simple",
    "title": "Notas de R",
    "section": "Modelo Líneal simple",
    "text": "Modelo Líneal simple\n\n#Modelo lineal simple\nmodel.Lsimple &lt;- lm(INGRESOS~RIESGO, data=data_clientes)\nsummary(model.Lsimple)\n\n\nCall:\nlm(formula = INGRESOS ~ RIESGO, data = data_clientes)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-19078  -4886   -835   1773  36185 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   23507.1      133.6  175.91   &lt;2e-16 ***\nRIESGOImpago  10615.8      302.4   35.11   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7691 on 4115 degrees of freedom\nMultiple R-squared:  0.2305,    Adjusted R-squared:  0.2303 \nF-statistic:  1233 on 1 and 4115 DF,  p-value: &lt; 2.2e-16"
  },
  {
    "objectID": "index.html#modelo-líneal-múltiple",
    "href": "index.html#modelo-líneal-múltiple",
    "title": "Notas de R",
    "section": "Modelo Líneal múltiple",
    "text": "Modelo Líneal múltiple\n\nlibrary(car)\n\nCargando paquete requerido: carData\n\n\n\nAdjuntando el paquete: 'car'\n\n\nThe following object is masked from 'package:dplyr':\n\n    recode\n\n\nThe following object is masked from 'package:purrr':\n\n    some\n\nlibrary(lmtest)\n\nCargando paquete requerido: zoo\n\n\n\nAdjuntando el paquete: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n#Modelo lineal múltiple\nmodel.Lmultiple &lt;- lm(INGRESOS~., data=subset(data_clientes, select = -ID))\nsummary(model.Lmultiple)\n\n\nCall:\nlm(formula = INGRESOS ~ ., data = subset(data_clientes, select = -ID))\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-20966.4  -3783.0   -164.1   3493.7  29467.3 \n\nCoefficients:\n                             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                   29705.1      579.6  51.246  &lt; 2e-16 ***\nEDAD                            267.7       13.2  20.274  &lt; 2e-16 ***\nGENEROMasculino                 487.9      182.0   2.681  0.00738 ** \nESTADO_CIVILSoltero           -8680.1      288.7 -30.068  &lt; 2e-16 ***\nESTADO_CIVILViudo/Divorciado   3569.1      495.9   7.198 7.24e-13 ***\nNUM_HIJOS                     -3088.4      137.1 -22.523  &lt; 2e-16 ***\nNUM_TARJETAS                    126.5      101.8   1.242  0.21414    \nMODALIDAD_PAGOSemanal         -2766.8      227.5 -12.162  &lt; 2e-16 ***\nHIPOTECASi                     -783.4      268.9  -2.913  0.00360 ** \nPRESTAMOS                     -4231.6      191.9 -22.049  &lt; 2e-16 ***\nRIESGOImpago                   4108.3      268.4  15.307  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5836 on 4105 degrees of freedom\n  (1 observation deleted due to missingness)\nMultiple R-squared:  0.5565,    Adjusted R-squared:  0.5554 \nF-statistic:   515 on 10 and 4105 DF,  p-value: &lt; 2.2e-16\n\n# Evaluación de supuestos\n\n# Normalidad de los residuos\nhist(resid(model.Lmultiple))\n\n\n\n\n\n\n\nshapiro.test(resid(model.Lmultiple))\n\n\n    Shapiro-Wilk normality test\n\ndata:  resid(model.Lmultiple)\nW = 0.98208, p-value &lt; 2.2e-16\n\n#Independencia de los residuos\ndurbinWatsonTest(model.Lmultiple)\n\n lag Autocorrelation D-W Statistic p-value\n   1       0.5497109     0.8976777       0\n Alternative hypothesis: rho != 0\n\n#Homocedasticidad\nbptest(model.Lmultiple)\n\n\n    studentized Breusch-Pagan test\n\ndata:  model.Lmultiple\nBP = 430.55, df = 10, p-value &lt; 2.2e-16\n\n# Supuesto de linealidad\nplot(model.Lmultiple, wich=1)\n\nWarning in plot.window(...): \"wich\" es un parámetro gráfico inválido\n\n\nWarning in plot.xy(xy, type, ...): \"wich\" es un parámetro gráfico inválido\n\n\nWarning in axis(side = side, at = at, labels = labels, ...): \"wich\" es un\nparámetro gráfico inválido\nWarning in axis(side = side, at = at, labels = labels, ...): \"wich\" es un\nparámetro gráfico inválido\n\n\nWarning in box(...): \"wich\" es un parámetro gráfico inválido\n\n\nWarning in title(...): \"wich\" es un parámetro gráfico inválido\n\n\nWarning in plot.xy(xy.coords(x, y), type = type, ...): \"wich\" es un parámetro\ngráfico inválido\n\n\nWarning in title(sub = sub.caption, ...): \"wich\" es un parámetro gráfico\ninválido\n\n\n\n\n\n\n\n\n\nWarning in plot.window(...): \"wich\" es un parámetro gráfico inválido\n\n\nWarning in plot.xy(xy, type, ...): \"wich\" es un parámetro gráfico inválido\n\n\nWarning in axis(side = side, at = at, labels = labels, ...): \"wich\" es un\nparámetro gráfico inválido\nWarning in axis(side = side, at = at, labels = labels, ...): \"wich\" es un\nparámetro gráfico inválido\n\n\nWarning in box(...): \"wich\" es un parámetro gráfico inválido\n\n\nWarning in title(...): \"wich\" es un parámetro gráfico inválido\n\n\nWarning in title(sub = sub.caption, ...): \"wich\" es un parámetro gráfico\ninválido\n\n\n\n\n\n\n\n\n\nWarning in plot.window(...): \"wich\" es un parámetro gráfico inválido\n\n\nWarning in plot.xy(xy, type, ...): \"wich\" es un parámetro gráfico inválido\n\n\nWarning in axis(side = side, at = at, labels = labels, ...): \"wich\" es un\nparámetro gráfico inválido\nWarning in axis(side = side, at = at, labels = labels, ...): \"wich\" es un\nparámetro gráfico inválido\n\n\nWarning in box(...): \"wich\" es un parámetro gráfico inválido\n\n\nWarning in title(...): \"wich\" es un parámetro gráfico inválido\n\n\nWarning in plot.xy(xy.coords(x, y), type = type, ...): \"wich\" es un parámetro\ngráfico inválido\n\n\nWarning in title(sub = sub.caption, ...): \"wich\" es un parámetro gráfico\ninválido\n\n\n\n\n\n\n\n\n\nWarning in plot.window(...): \"wich\" es un parámetro gráfico inválido\n\n\nWarning in plot.xy(xy, type, ...): \"wich\" es un parámetro gráfico inválido\n\n\nWarning in axis(side = side, at = at, labels = labels, ...): \"wich\" es un\nparámetro gráfico inválido\nWarning in axis(side = side, at = at, labels = labels, ...): \"wich\" es un\nparámetro gráfico inválido\n\n\nWarning in box(...): \"wich\" es un parámetro gráfico inválido\n\n\nWarning in title(...): \"wich\" es un parámetro gráfico inválido\n\n\nWarning in plot.xy(xy.coords(x, y), type = type, ...): \"wich\" es un parámetro\ngráfico inválido\n\n\nWarning in title(sub = sub.caption, ...): \"wich\" es un parámetro gráfico\ninválido\n\n\n\n\n\n\n\n\n#Ausencia de multicolinealidad\nvif(model.Lmultiple)\n\n                   GVIF Df GVIF^(1/(2*Df))\nEDAD           2.055511  1        1.433705\nGENERO         1.000704  1        1.000352\nESTADO_CIVIL   9.037144  2        1.733835\nNUM_HIJOS      3.113940  1        1.764636\nNUM_TARJETAS   4.430928  1        2.104977\nMODALIDAD_PAGO 1.563332  1        1.250333\nHIPOTECA       1.513750  1        1.230346\nPRESTAMOS      3.125541  1        1.767920\nRIESGO         1.368491  1        1.169825"
  },
  {
    "objectID": "index.html#modelo-logístico",
    "href": "index.html#modelo-logístico",
    "title": "Notas de R",
    "section": "Modelo Logístico",
    "text": "Modelo Logístico\n\noptions(scipen = 999)\ndata_clientes$RIESGO_bin &lt;- ifelse(data_clientes$RIESGO == \"V\", 1, 0)\n\nmodelo.logit &lt;- glm(RIESGO_bin ~. ,\n                    data = subset(data_clientes, select= -ID),\n                    family = binomial)\n\nWarning: glm.fit: algorithm did not converge\n\nsummary(modelo.logit)\n\n\nCall:\nglm(formula = RIESGO_bin ~ ., family = binomial, data = subset(data_clientes, \n    select = -ID))\n\nCoefficients:\n                                               Estimate\n(Intercept)                    -26.56606852354313019760\nEDAD                             0.00000000000000377462\nINGRESOS                        -0.00000000000000004982\nGENEROMasculino                 -0.00000000000017274949\nESTADO_CIVILSoltero             -0.00000000000012194373\nESTADO_CIVILViudo/Divorciado     0.00000000000043157835\nNUM_HIJOS                       -0.00000000000017836953\nNUM_TARJETAS                    -0.00000000000004034166\nMODALIDAD_PAGOSemanal           -0.00000000000012516562\nHIPOTECASi                       0.00000000000007230869\nPRESTAMOS                        0.00000000000005453260\nRIESGOImpago                    -0.00000000000012061717\n                                             Std. Error z value Pr(&gt;|z|)\n(Intercept)                  45296.74856469828955596313  -0.001        1\nEDAD                           845.15799632907771865575   0.000        1\nINGRESOS                         0.95247389402624604848   0.000        1\nGENEROMasculino              11115.89810978742571023759   0.000        1\nESTADO_CIVILSoltero          19460.25179181103885639459   0.000        1\nESTADO_CIVILViudo/Divorciado 30450.42116368264760239981   0.000        1\nNUM_HIJOS                     8870.07570256622602755670   0.000        1\nNUM_TARJETAS                  6214.39177559506970283110   0.000        1\nMODALIDAD_PAGOSemanal        14130.64339357041353650857   0.000        1\nHIPOTECASi                   16429.43340504031584714539   0.000        1\nPRESTAMOS                    12386.07101755217627214734   0.000        1\nRIESGOImpago                 16839.91498738039808813483   0.000        1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 0.000000000000  on 4115  degrees of freedom\nResidual deviance: 0.000000023879  on 4104  degrees of freedom\n  (1 observation deleted due to missingness)\nAIC: 24\n\nNumber of Fisher Scoring iterations: 25\n\nexp(coefficients(modelo.logit))\n\n                 (Intercept)                         EDAD \n        0.000000000002900701         1.000000000000003775 \n                    INGRESOS              GENEROMasculino \n        1.000000000000000000         0.999999999999827249 \n         ESTADO_CIVILSoltero ESTADO_CIVILViudo/Divorciado \n        0.999999999999878098         1.000000000000431655 \n                   NUM_HIJOS                 NUM_TARJETAS \n        0.999999999999821587         0.999999999999959699 \n       MODALIDAD_PAGOSemanal                   HIPOTECASi \n        0.999999999999874878         1.000000000000072387 \n                   PRESTAMOS                 RIESGOImpago \n        1.000000000000054623         0.999999999999879430"
  }
]